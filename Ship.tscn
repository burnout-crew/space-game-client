[gd_scene load_steps=3 format=2]

[ext_resource path="res://test/sibelius_drone/sibelius_drone.tscn" type="PackedScene" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends Spatial

# Parameters
export var id = \"\"
export var m = 1.0
export var epoch = 0.0
export var x = Vector3()
export var p = Vector3()
export var q = Quat()
export var L = Vector3()

# TODO: 1 kg cube behavior
export var I1 = Vector3(1, 1, 1) / 6
export var I2 = Vector3(0, 0, 0)
export var II1 = Vector3()
export var II2 = Vector3()

# TODO: Temporary controls
export var thrust = Vector3()
export var torque = Vector3()

# Calculate the inverse of the moment of inertia tensor
# Assumes matrix symmetry (diagonal and corner)
func calculate_moi_inverse():
	var a = I1.x
	var b = I1.y
	var c = I1.z
	var d = I2.x
	var e = I2.y
	var f = I2.z
	var det = a*b*c - a*f*f - b*e*e - c*d*d + 2*d*e*f
	II1 = Vector3(b*c-f*f, a*c-e*e, a*b-d*d) / det
	II2 = Vector3(e*f-c*d, d*f-b*e, d*e-a*f) / det

# Perform [3x3] [3x1] multiplication, return resultant vector
# Assumes matrix symmetry (diagonal and corner)
# For use with moment of inertia and its inverse
func multiply_moi(diag, crnr, v):
	var x = Vector3(diag.x, crnr.x, crnr.y).dot(v)
	var y = Vector3(crnr.x, diag.y, crnr.z).dot(v)
	var z = Vector3(crnr.y, crnr.z, diag.z).dot(v)
	return Vector3(x, y, z)

func _ready():
	epoch = OS.get_system_time_msecs()
	calculate_moi_inverse()

func _physics_process(delta):
	#var t = (OS.get_system_time_msecs() - epoch) / 1000.0
	#_s = lerp(_s, s, min(1.0, delta / 0.1))
	#_p = lerp(_p, p, min(1.0, delta / 0.1))
	
	# TODO
	var impulse = thrust * delta
	x += (p + 0.5 * impulse) / m * delta
	p += impulse
	translation = x
	
	var ang_impulse = torque * delta
	
	# Solve L = I * omega
	var omega = multiply_moi(II1, II2, L)


"

[node name="Ship" type="Spatial"]
script = SubResource( 1 )

[node name="sibelius_drone_base_test3" parent="." instance=ExtResource( 1 )]

[node name="OmniLight2" type="OmniLight" parent="sibelius_drone_base_test3"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -2.03186 )
light_color = Color( 1, 0.560784, 0.560784, 1 )
light_specular = 0.0
omni_range = 2.0

[node name="SpotLight2" type="SpotLight" parent="sibelius_drone_base_test3"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -0.711625 )
light_color = Color( 1, 0.427451, 0.427451, 1 )
spot_range = 10.0
spot_angle = 30.0

[node name="OmniLight" type="OmniLight" parent="sibelius_drone_base_test3"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 6.63373 )
light_specular = 0.0
omni_range = 0.8
